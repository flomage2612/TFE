#include "rule.h"

void printRule(rule* r)
{
	printf("Rule : \n");
	printPattern(r->left);
	printf("to :");
	printPattern(r->right);
}

rule* createRule(pattern* l, pattern* r)
{
	rule* new_rule = malloc(sizeof(rule));
	new_rule->left = l; 
	new_rule->right = r;
	return new_rule;
}

void applyRules(hash_table* rules, pattern* p, int order)
{
	// need to generate prefixes of size m-2m-1
	for(int i = order; i < 2*order; i++)
	{
		pattern* sub = subPattern(p, i);
		int key = hashKey(rules->capacity, sub );
		rule* r = getRule(rules, sub, key);
		if(r != NULL)
		{
			sub = r->right;
			for(int j = 0; j < sub->size; j++)
			{
				p->values[j] = sub->values[j];
			}
			return;
		}
	}
	
	
}
